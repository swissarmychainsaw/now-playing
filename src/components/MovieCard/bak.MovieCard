import { useState, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaStar, FaRegStar } from 'react-icons/fa';
import { getOMDbPoster } from '../../utils/imageFallback';
import { useUser } from '../../context/UserContext';
import { useRatings } from '../../context/RatingsContext';
import { useMovieRating } from '../../hooks/useMovieRating';
import Rating from '../Rating/Rating';

/**
 * MovieCard Component
 * 
 * Displays a movie poster with hover effects, rating functionality, and navigation to the movie detail page.
 * 
 * @component
 * @param {Object} props - Component props
 * @param {Object} props.movie - The movie object containing movie details
 * @param {Function} [props.onRate] - Callback function for when a movie is rated (deprecated, use useMovieRating hook instead)
 * @param {boolean} [props.showRating=true] - Whether to show the rating stars
 * @param {boolean} [props.showTitle=true] - Whether to show the movie title
 * @param {boolean} [props.showYear=true] - Whether to show the release year
 * @param {string} [props.size='default'] - Size variant: 'default', 'small', or 'large'
 * @returns {JSX.Element} Rendered MovieCard component
 * 
 * @example
 * // Basic usage
 * <MovieCard movie={movieData} />
 * 
 * // With custom props
 * <MovieCard 
 *   movie={movieData} 
 *   showRating={true}
 *   showTitle={true}
 *   showYear={true}
 *   size="default"
 * />
 */

const MovieCard = ({ 
  movie, 
  onRate, 
  showRating = true, 
  showTitle = true, 
  showYear = true,
  size = 'default'
}) => {
  const navigate = useNavigate();
  const { user } = useUser();
  const { getMovieRating } = useRatings();
  const { toggleLike, isRating } = useMovieRating();
  
  const [imgSrc, setImgSrc] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  
  // Get the current rating for this movie
  const currentRating = getMovieRating(movie.id)?.rating || 0;
  
  // Size variants
  const sizeClasses = {
    small: {
      container: 'w-32',
      title: 'text-sm',
      year: 'text-xs',
      rating: 'text-xs',
    },
    default: {
      container: 'w-48',
      title: 'text-base',
      year: 'text-sm',
      rating: 'text-sm',
    },
    large: {
      container: 'w-64',
      title: 'text-lg',
      year: 'text-base',
      rating: 'text-base',
    },
  };
  
  const sizeConfig = sizeClasses[size] || sizeClasses.default;
  
  /**
   * Handles clicks on the movie card
   * 
   * Navigates to the movie detail page when the card is clicked, unless the click
   * was on a rating star or a like button.
   * 
   * @param {Event} e - The click event
   */
  const handleCardClick = useCallback((e) => {
    // Check if the click was on a rating star, like button, or their children
    const interactiveElements = [
      e.target.closest('.rating-stars, .rating-stars *'),
      e.target.closest('.like-button, .like-button *'),
    ];
    
    // Only navigate if the click wasn't on an interactive element
    if (!interactiveElements.some(el => el)) {
      navigate(`/movie/${movie.id}`);
    }
  }, [movie.id, navigate]);

  const loadImage = useCallback(() => {
    // Skip if no movie
    if (!movie) {
      setImgSrc('/placeholder-movie.png');
      setLoading(false);
      return () => {}; // Return empty cleanup function
    }
    
    // Always return a cleanup function
    let isMounted = true;
    let tmdbImg = null;
    let omdbImg = null;

    const cleanup = () => {
      isMounted = false;
      if (tmdbImg) {
        tmdbImg.onload = null;
        tmdbImg.onerror = null;
        tmdbImg = null;
      }
      if (omdbImg) {
        omdbImg.onload = null;
        omdbImg.onerror = null;
        omdbImg = null;
      }
    };

    const loadImageAsync = async () => {
      try {
        // If no poster path, try to get from OMDb or use placeholder
        if (!movie.poster_path) {
          if (!movie.title) {
            throw new Error('No movie title available for OMDb lookup');
          }
          
          const omdbUrl = await getOMDbPoster(movie.title, movie.release_date?.substring(0, 4));
          
          if (omdbUrl && isMounted) {
            omdbImg = new Image();
            omdbImg.onload = () => {
              if (isMounted) {
                setImgSrc(omdbUrl);
                setLoading(false);
              }
            };
            omdbImg.onerror = () => {
              if (isMounted) {
                setImgSrc('/placeholder-movie.png');
                setLoading(false);
                setError(true);
              }
            };
            omdbImg.src = omdbUrl;
          } else if (isMounted) {
            setImgSrc('/placeholder-movie.png');
            setLoading(false);
          }
          return;
        }

        // Try TMDB first if we have a poster path
        const tmdbUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;
        
        tmdbImg = new Image();
        
        tmdbImg.onload = () => {
          if (isMounted) {
            setImgSrc(tmdbUrl);
            setLoading(false);
          }
        };
        
        tmdbImg.onerror = async () => {
          if (!isMounted) return;
          
          try {
            // Fallback to OMDb if TMDB fails
            if (!movie.title) throw new Error('No movie title for OMDb fallback');
            
            const omdbUrl = await getOMDbPoster(movie.title, movie.release_date?.substring(0, 4));
            
            if (omdbUrl && isMounted) {
              omdbImg = new Image();
              omdbImg.onload = () => {
                if (isMounted) {
                  setImgSrc(omdbUrl);
                  setLoading(false);
                }
              };
              omdbImg.onerror = () => {
                if (isMounted) {
                  setImgSrc('/placeholder-movie.png');
                  setLoading(false);
                  setError(true);
                }
              };
              omdbImg.src = omdbUrl;
            } else {
              throw new Error('No OMDb URL available');
            }
          } catch (err) {
            if (isMounted) {
              setImgSrc('/placeholder-movie.png');
              setLoading(false);
              setError(true);
            }
          }
        };
        
        tmdbImg.src = tmdbUrl;

      } catch (error) {
        console.error('Error loading image:', error);
        if (isMounted) {
          setImgSrc('/placeholder-movie.png');
          setLoading(false);
          setError(true);
        }
      }
    };

    loadImageAsync();
    return cleanup;
  }, [movie.poster_path, movie.title, movie.release_date]);

  // Load image when component mounts or when the movie changes
  useEffect(() => {
    // Reset state when movie changes
    setImgSrc('');
    setLoading(true);
    setError(false);
    
    // Load the new image
    const cleanup = loadImage();
    
    // Cleanup function to cancel any pending image loads
    return () => {
        ) : (
          <FaRegHeart className="text-white" />
        )}
      </button>

      {/* Hover Overlay */}
      <div
        className={`absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent flex flex-col justify-end p-4 transition-opacity ${
          isHovered ? 'opacity-100' : 'opacity-0'
        }`}
      >
        <div className="mt-auto">
          {showRating && (
            <div className="mb-3">
              <Rating
                movieId={movie.id}
                movieData={{
                  id: movie.id,
                  title: movie.title,
                  poster_path: movie.poster_path,
                  release_date: movie.release_date,
                  overview: movie.overview,
                  vote_average: movie.vote_average,
                }}
                size={size === 'small' ? 'sm' : 'md'}
                showCount={true}
              />
            </div>
            <span className="text-yellow-400 text-xs">
              {movie.vote_count ? `(${movie.vote_count.toLocaleString()})` : ''}
            </span>
          </div>
          <h3 className="text-white font-bold text-lg mb-1 line-clamp-2">
            {movie.title}
          </h3>
          {movie.release_date && (
            <p className="text-gray-300 text-sm mb-2">
              {new Date(movie.release_date).getFullYear()}
              {movie.original_language && movie.original_language !== 'en' && (
                <span className="ml-2 px-1.5 py-0.5 bg-gray-700 rounded text-xs">
                  {movie.original_language.toUpperCase()}
                </span>
              )}
            </p>
          )}
          <p className="text-gray-300 text-sm line-clamp-3">
            {movie.overview || 'No overview available.'}
          </p>
          {movie.genre_names && movie.genre_names.length > 0 && (
            <div className="mt-2 flex flex-wrap gap-1">
              {movie.genre_names.slice(0, 3).map((genre, index) => (
                <span key={index} className="text-xs px-2 py-0.5 bg-gray-700 rounded-full">
                  {genre}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
      
      <div className="mt-2">
        <h3 className="font-semibold text-gray-900 line-clamp-1">{movie.title}</h3>
        <div className="flex items-center justify-between mt-1">
          <div className="flex items-center justify-between w-full">
            <p className="text-sm text-gray-600">
              {movie.year || (movie.release_date ? new Date(movie.release_date).getFullYear() : 'N/A')}
              {movie.is_oscar_winner && (
                <span className="ml-1 text-amber-600" title="Oscar Winner">üèÜ</span>
              )}
            </p>
            {showRating && (
              <div className="flex items-center">
                <Rating 
                  movieId={movie.id}
                  initialRating={movie.user_rating || 0}
                  onRate={handleRate}
                  size="xs"
                />
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default MovieCard;
